
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Connection Details
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

- name: TIMESTAMP -              🟢 START - LOAD OVERLAY MERGE TOPOLOGY 
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"



  
- name: OUTPUT -          🟢 RESULT
  debug: 
    var: output_string.stdout_lines
  #when: PRINT_LOGINS == true


- name: TOPOLOGY -               📥 WRITE TO LOGFILE
  shell: |
    export MESSAGE="Load Robotshop overlay Topology"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../installAIManager.log
    echo $currentDate" - "$USER" - "$MESSAGE  >> ../installAIManager.log
  ignore_errors: yes

# --------------------------------------------------------------------------------------------------------------------------------------
# WAIOPS
# --------------------------------------------------------------------------------------------------------------------------------------
- name: TOPOLOGY -               🚀 CREATE OVERLAY TOPOLOGY
  shell: |
    set -x
    
    # Get Namespace
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

    # Create Route
    oc create route reencrypt topology-file-api -n $WAIOPS_NAMESPACE --service=aiops-topology-file-observer --port=https-file-observer-api

    # Get Credentials
    export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
    export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $WAIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
    export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

    export TOPO_ROUTE="https://"$(oc get route -n $WAIOPS_NAMESPACE topology-file-api -o jsonpath={.spec.host})
    export JOB_ID=robot-shop-topology

    echo "URL: $TOPO_ROUTE"
    echo "LOGIN: $LOGIN"

    # Get FILE_OBSERVER_POD
    FILE_OBSERVER_POD=$(oc get po -n $WAIOPS_NAMESPACE -l app.kubernetes.io/instance=aiops-topology,app.kubernetes.io/name=file-observer -o jsonpath='{.items[0].metadata.name}')

    LOAD_FILE_NAME="robot-shop-file.txt"
    FILE_OBSERVER_CAP="../tools/05_topology/aimanager/$LOAD_FILE_NAME"
    TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"
    echo ""
    echo "Copying capture file [${FILE_OBSERVER_CAP}] to file observer pod"
    oc cp ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}


    # Get FILE_OBSERVER JOB
    curl -X "POST" "$TOPO_ROUTE/1.0/file-observer/jobs" --insecure \
      -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
      -H "accept: application/json" \
      -H "Content-Type: application/json" \
      -u $LOGIN \
      -d "{
      \"unique_id\": \"${JOB_ID}\",
      \"description\": \"Automatically created by Nicks scripts\",
      \"parameters\": {
          \"file\": \"${TARGET_FILE_PATH}\"
          }
      }"


  register: output_string
  ignore_errors: yes
  
- name: OUTPUT -          🟢 RESULT
  debug: 
    var: output_string.stdout_lines
  #when: PRINT_LOGINS == true

