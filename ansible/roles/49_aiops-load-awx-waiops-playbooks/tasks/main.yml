

# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Create Gateway
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************
    

- name: TIMESTAMP -              üü¢ START - LOAD AWX RUNBOOKS
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"



- name: LOGGING -              üü¢ WRITE TO LOGFILE
  shell: |
    export MESSAGE="Load WAIOPS Install Templates into AWX"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../installAIManager.log
    echo $currentDate" - "$USER" - "$MESSAGE  >> ../installAIManager.log
  ignore_errors: yes


- name: AWX Runbook Content -            üåè Get AWX URL
  shell: |
    export AWX_ROUTE=$(oc get route -n awx awx -o jsonpath={.spec.host})
    export AWX_URL=$(echo "https://$AWX_ROUTE")
    echo $AWX_URL
  ignore_errors: yes
  register: ACT_AWX_URL


- name: AWX Runbook Content -            üíæ Set Fact AWX_URL {{ ACT_AWX_URL.stdout }} 
  set_fact: AWX_URL={{ ACT_AWX_URL.stdout }} 


- name: AWX Runbook Content -            üåè Get AWX Password
  shell: |
    export ADMIN_PASSWORD=$(oc -n awx get secret awx-admin-password -o jsonpath='{.data.password}' | base64 --decode && echo)
    echo $ADMIN_PASSWORD
  ignore_errors: yes
  register: ACT_AWX_PWD


- name: AWX Runbook Content -            üíæ Set Fact AWX_PWD {{ ACT_AWX_PWD.stdout }} 
  set_fact: AWX_PWD={{ ACT_AWX_PWD.stdout }} 


- name: AWX Runbook Content -            üöÄ Create AWX Execution Environment
  shell: |
    export RUNNER_IMAGE=niklaushirt/cp4waiops-awx:0.1.3
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/execution_environments/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "CP4WAIOPS Execution Environment",
      "description": "CP4WAIOPS Execution Environment",
      "organization": null,
      "image": "'$RUNNER_IMAGE'",
      "credential": null,
      "pull": "missing"
    }')

    if [[ $result =~ " already exists" ]];
    then
        export EXENV_ID=$(curl -X "GET" -s "{{ AWX_URL }}/api/v2/execution_environments/" -u "admin:{{ AWX_PWD }}" --insecure|jq -c '.results[]| select( .name == "CP4WAIOPS Execution Environment")|.id')
    else
        export EXENV_ID=$(echo $result|jq ".id")
    fi 
    sleep 60
    echo "$EXENV_ID"
  ignore_errors: yes
  register: EXENV_ID





- name: AWX Runbook Content -            üíæ Set Fact EXENV_ID {{ EXENV_ID.stdout }} 
  set_fact: EXENV_ID={{ EXENV_ID.stdout }} 


- name: AWX Runbook Content -            üöÄ Create AWX Project
  shell: |
    export AWX_REPO=https://github.com/niklaushirt/awx-waiops33.git
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/projects/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
        "name": "CP4WAIOPS Install Project",
        "description": "CP4WAIOPS Install Project",
        "local_path": "",
        "scm_type": "git",
        "scm_url": "'$AWX_REPO'",
        "scm_branch": "",
        "scm_refspec": "",
        "scm_clean": false,
        "scm_track_submodules": false,
        "scm_delete_on_update": false,
        "credential": null,
        "timeout": 0,
        "organization": 1,
        "scm_update_on_launch": false,
        "scm_update_cache_timeout": 0,
        "allow_override": false,
        "default_environment": null
    }')

    if [[ $result =~ " already exists" ]];
    then
        export PROJECT_ID=$(curl -X "GET" -s "{{ AWX_URL }}/api/v2/projects/" -u "admin:{{ AWX_PWD }}" --insecure|jq -c '.results[]| select( .name == "CP4WAIOPS Install Project")|.id')
    else
        export PROJECT_ID=$(echo $result|jq ".id")
    fi
    sleep 60
    echo "$PROJECT_ID"
  ignore_errors: yes
  register: AWX_RESULT



- name: AWX Runbook Content -            üíæ Set Fact AWX_PROJECT_ID {{ AWX_RESULT.stdout }} 
  set_fact: AWX_PROJECT_ID={{ AWX_RESULT.stdout }} 



- name: AWX Runbook Content -            üöÄ Wait for AWX Project
  shell: |
    export STATUS=$(curl -X "GET" -s "{{ AWX_URL }}/api/v2/projects/" -u "admin:{{ AWX_PWD }}" --insecure|jq -c '.results[]| select( .name == "CP4WAIOPS Install Project")|.status')
    echo "$STATUS"
  ignore_errors: yes
  register: STATUS

- name: AWX Runbook Content -            üíæ Set Fact Project Status - {{ STATUS.stdout }} 
  set_fact: STATUS={{ STATUS.stdout }} 





- name: AWX Runbook Content -            üöÄ Create AWX Inventory)
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/inventories/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "CP4WAIOPS Install",
      "description": "CP4WAIOPS Install",
      "organization": 1,
      "project": '{{ AWX_PROJECT_ID }}',
      "kind": "",
      "host_filter": null,
      "variables": ""
    }')


    if [[ $result =~ " already exists" ]];
    then
        export INVENTORY_ID=$(curl -X "GET" -s "{{ AWX_URL }}/api/v2/inventories/" -u "admin:{{ AWX_PWD }}" --insecure|jq -c '.results[]| select( .name == "CP4WAIOPS Install")|.id')
    else
        export INVENTORY_ID=$(echo $result|tr -d '\n'|jq ".id")
        sleep 15
    fi
    echo "$INVENTORY_ID"
  ignore_errors: yes
  register: AWX_RESULT



- name: AWX Runbook Content -            üíæ Set Fact AWX_INVENTORY_ID {{ AWX_RESULT.stdout }} 
  set_fact: AWX_INVENTORY_ID={{ AWX_RESULT.stdout }} 






- name: AWX Runbook Content -            üöÄ Create AWX Template Install CP4WAIOPS AI Manager with Demo content
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/job_templates/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "11_Install CP4WAIOPS AI Manager with Demo content",
      "description": "11_Install CP4WAIOPS AI Manager with Demo content",
      "job_type": "run",
      "inventory": {{AWX_INVENTORY_ID}},
      "project": {{AWX_PROJECT_ID}},
      "playbook": "ansible/10_install-cp4waiops_ai_manager_only_with_demo.yaml",
      "scm_branch": "",
      "extra_vars": "",
      "ask_variables_on_launch": "true",
      "extra_vars": "ENTITLED_REGISTRY_KEY: CHANGEME",
      "execution_environment": {{EXENV_ID}}
    }')
    echo $result
  ignore_errors: yes
  register: AWX_RESULT




- name: AWX Runbook Content -            üöÄ Create AWX Template Install CP4WAIOPS AI Event Manager
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/job_templates/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "12_Install CP4WAIOPS AI Event Manager",
      "description": "12_Install CP4WAIOPS AI Event Manager",
      "job_type": "run",
      "inventory": {{AWX_INVENTORY_ID}},
      "project": {{AWX_PROJECT_ID}},
      "playbook": "ansible/11_install-cp4waiops_event_manager.yaml",
      "scm_branch": "",
      "extra_vars": "",
      "ask_variables_on_launch": true,
      "extra_vars": "ENTITLED_REGISTRY_KEY: CHANGEME",
      "execution_environment": {{EXENV_ID}}
    }')
    echo $result
  ignore_errors: yes
  register: AWX_RESULT


- name: AWX Runbook Content -            üöÄ Create AWX Template Get CP4WAIOPS Logins
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/job_templates/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "91_Get CP4WAIOPS Logins",
      "description": "91_Get CP4WAIOPS Logins",
      "job_type": "run",
      "inventory": {{AWX_INVENTORY_ID}},
      "project": {{AWX_PROJECT_ID}},
      "playbook": "ansible/90_aiops-logins.yaml",
      "scm_branch": "",
      "extra_vars": "",
      "execution_environment": {{EXENV_ID}}
    }')
    echo $result
  ignore_errors: yes
  register: AWX_RESULT


- name: AWX Runbook Content -            üöÄ Create AWX Template 14_Install Rook Ceph
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/job_templates/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "14_Install Rook Ceph",
      "description": "14_Install Rook Ceph",
      "job_type": "run",
      "inventory": {{AWX_INVENTORY_ID}},
      "project": {{AWX_PROJECT_ID}},
    "playbook": "ansible/14_install-rook-ceph.yaml",
      "scm_branch": "",
      "extra_vars": "",
      "execution_environment": {{EXENV_ID}}
    }')
    echo $result
  ignore_errors: yes
  register: AWX_RESULT




- name: AWX Runbook Content -            üöÄ Create AWX Template 17_Install CP4WAIOPS Demo UI
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/job_templates/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "17_Install CP4WAIOPS Demo UI",
      "description": "17_Install CP4WAIOPS Demo UI",
      "job_type": "run",
      "inventory": {{AWX_INVENTORY_ID}},
      "project": {{AWX_PROJECT_ID}},
    "playbook": "ansible/18_aiops-demo-ui.yaml",
      "scm_branch": "",
      "extra_vars": "",
      "execution_environment": {{EXENV_ID}}
    }')
    echo $result
  ignore_errors: yes
  register: AWX_RESULT



- name: AWX Runbook Content -            üöÄ Create AWX Template 18_Install CP4WAIOPS Toolbox
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/job_templates/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "18_Install CP4WAIOPS Toolbox",
      "description": "18_Install CP4WAIOPS Toolbox",
      "job_type": "run",
      "inventory": {{AWX_INVENTORY_ID}},
      "project": {{AWX_PROJECT_ID}},
    "playbook": "ansible/17_aiops-toolbox.yaml",
      "scm_branch": "",
      "extra_vars": "",
      "execution_environment": {{EXENV_ID}}
    }')
    echo $result
  ignore_errors: yes
  register: AWX_RESULT



- name: AWX Runbook Content -            üöÄ Create AWX Template 20_Install Turbonomic
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/job_templates/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "20_Install Turbonomic",
      "description": "20_Install Turbonomic",
      "job_type": "run",
      "inventory": {{AWX_INVENTORY_ID}},
      "project": {{AWX_PROJECT_ID}},
    "playbook": "ansible/20_install-turbonomic.yaml",
      "scm_branch": "",
      "extra_vars": "",
      "execution_environment": {{EXENV_ID}}
    }')
    echo $result
  ignore_errors: yes
  register: AWX_RESULT



- name: AWX Runbook Content -            üöÄ Create AWX Template 21_Install Humio
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/job_templates/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "21_Install Humio",
      "description": "21_Install Humio",
      "job_type": "run",
      "inventory": {{AWX_INVENTORY_ID}},
      "project": {{AWX_PROJECT_ID}},
    "playbook": "ansible/21_install-humio.yaml",
      "scm_branch": "",
      "extra_vars": "",
      "execution_environment": {{EXENV_ID}}
    }')
    echo $result
  ignore_errors: yes
  register: AWX_RESULT



- name: AWX Runbook Content -            üöÄ Create AWX Template 22_Install ELK
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/job_templates/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "22_Install ELK",
      "description": "22_Install ELK",
      "job_type": "run",
      "inventory": {{AWX_INVENTORY_ID}},
      "project": {{AWX_PROJECT_ID}},
    "playbook": "ansible/22_install-elk-ocp.yaml",
      "scm_branch": "",
      "extra_vars": "",
      "execution_environment": {{EXENV_ID}}
    }')
    echo $result
  ignore_errors: yes
  register: AWX_RESULT



- name: AWX Runbook Content -            üöÄ Create AWX Template 23_Install AWX
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/job_templates/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "23_Install AWX",
      "description": "23_Install AWX",
      "job_type": "run",
      "inventory": {{AWX_INVENTORY_ID}},
      "project": {{AWX_PROJECT_ID}},
    "playbook": "ansible/23_install-awx.yaml",
      "scm_branch": "",
      "extra_vars": "",
      "execution_environment": {{EXENV_ID}}
    }')
    echo $result
  ignore_errors: yes
  register: AWX_RESULT



- name: AWX Runbook Content -            üöÄ Create AWX Template 24_Install ManageIQ
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/job_templates/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "24_Install ManageIQ",
      "description": "24_Install ManageIQ",
      "job_type": "run",
      "inventory": {{AWX_INVENTORY_ID}},
      "project": {{AWX_PROJECT_ID}},
    "playbook": "ansible/24_install-manageiq.yaml",
      "scm_branch": "",
      "extra_vars": "",
      "execution_environment": {{EXENV_ID}}
    }')
    echo $result
  ignore_errors: yes
  register: AWX_RESULT



- name: AWX Runbook Content -            üöÄ Create AWX Template 29_Install ServiceMesh
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/job_templates/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "29_Install ServiceMesh",
      "description": "29_Install ServiceMesh",
      "job_type": "run",
      "inventory": {{AWX_INVENTORY_ID}},
      "project": {{AWX_PROJECT_ID}},
    "playbook": "ansible/29_install-servicemesh.yaml",
      "scm_branch": "",
      "extra_vars": "",
      "execution_environment": {{EXENV_ID}}
    }')
    echo $result
  ignore_errors: yes
  register: AWX_RESULT





- name: AWX Runbook Content -            üöÄ Create AWX Template 80_Topology Load for AI Manager
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/job_templates/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "80_Topology Load for AI Manager",
      "description": "80_Topology Load for AI Manager",
      "job_type": "run",
      "inventory": {{AWX_INVENTORY_ID}},
      "project": {{AWX_PROJECT_ID}},
    "playbook": "ansible/80_load-topology-all.yaml",
      "scm_branch": "",
      "extra_vars": "",
      "execution_environment": {{EXENV_ID}}
    }')
    echo $result
  ignore_errors: yes
  register: AWX_RESULT





- name: AWX Runbook Content -            üöÄ Create AWX Template 82_Topology Load for Event Manager
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/job_templates/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "82_Topology Load for Event Manager",
      "description": "82_Topology Load for Event Manager",
      "job_type": "run",
      "inventory": {{AWX_INVENTORY_ID}},
      "project": {{AWX_PROJECT_ID}},
    "playbook": "ansible/80_load-topology-all-event.yaml",
      "scm_branch": "",
      "extra_vars": "",
      "execution_environment": {{EXENV_ID}}
    }')
    echo $result
  ignore_errors: yes
  register: AWX_RESULT





- name: AWX Runbook Content -            üöÄ Create AWX Template 84_Train All Models
  shell: |
    export result=$(curl -X "POST" -s "{{ AWX_URL }}/api/v2/job_templates/" -u "admin:{{ AWX_PWD }}" --insecure \
    -H 'content-type: application/json' \
    -d $'{
      "name": "84_Train All Models",
      "description": "84_Train All Models",
      "job_type": "run",
      "inventory": {{AWX_INVENTORY_ID}},
      "project": {{AWX_PROJECT_ID}},
    "playbook": "ansible/85_training-all.yaml",
      "scm_branch": "",
      "extra_vars": "",
      "execution_environment": {{EXENV_ID}}
    }')
    echo $result
  ignore_errors: yes
  register: AWX_RESULT




