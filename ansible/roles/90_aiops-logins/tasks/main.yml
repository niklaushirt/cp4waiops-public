
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Connection Details
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Get Cluster FQDN
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

- name: PREREQUISITES -  üåè Get Cluster FQDN
  shell: |
    CLUSTER_ROUTE=$(oc get routes console -n openshift-console | tail -n 1 2>&1 ) 
    CLUSTER_FQDN=$( echo $CLUSTER_ROUTE | awk '{print $2}')
    echo ${CLUSTER_FQDN##*console.}
  register: CLUSTER_NAME



# --------------------------------------------------------------------------------------------------------------------------------------
# WAIOPS
# --------------------------------------------------------------------------------------------------------------------------------------
- name: LOGIN -  üöÄ WAIOPS
  shell: |
    echo "CloudPak for Watson AIOps"
    echo "**********************************************************************************************************************************"
    echo "CP4WAIOPS"
    echo "**********************************************************************************************************************************"
    echo "    AIOPS:"
    echo "        URL:      https://$(oc get route -n {{ WAIOPS_NAMESPACE }} cpd -o jsonpath={.spec.host})"
    echo "        ADMIN USER:"
    echo "         User:     $(oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_username}' | base64 --decode && echo)"
    echo "         Password: $(oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 --decode)"
    echo " "
    echo "    Administration hub / Common Services"
    echo "        URL:      https://$(oc get route -n ibm-common-services cp-console -o jsonpath={.spec.host})"
    echo "        User:     $(oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_username}' | base64 --decode && echo)"
    echo "        Password: $(oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 --decode)"
    echo " "
    echo " "
    echo " "
    echo " "
  register: output_string
  ignore_errors: yes
- name: LOGIN -          üîê WAIOPS
  debug: 
    var: output_string.stdout_lines
  #when: PRINT_LOGINS == true



# --------------------------------------------------------------------------------------------------------------------------------------
# EventManager
# --------------------------------------------------------------------------------------------------------------------------------------
- name: CHECK -  üîé ADDONS - EventManager
  kubernetes.core.k8s:
    kind: Namespace
    name: "{{ EVTMGR_NAMESPACE }}"
  register: EVENTMANAGER_EXISTS 

- name: LOGIN -  üöÄ ADDONS - EventManager
  block:
  - name: LOGIN -  üöÄ ADDONS - EventManager
    shell: |
      echo "**********************************************************************************************************************************"
      echo "EventManager Connection Details"
      echo "**********************************************************************************************************************************"
      echo "            üåè URL:      https://$(oc get route -n {{ EVTMGR_NAMESPACE }}  evtmanager-ibm-hdm-common-ui -o jsonpath={.spec.host})"
      echo "            üßë User:     demo"
      echo "            üîê Password: P4ssw0rd!"
      echo ""
      echo "            üßë User:     smadmin"
      echo "            üîê Password: $(oc get secret -n {{ EVTMGR_NAMESPACE }}  evtmanager-was-secret -o jsonpath='{.data.WAS_PASSWORD}'| base64 --decode && echo)"
    register: output_string
    ignore_errors: yes
  - name: LOGIN -          üîê EventManager
    debug: 
      var: output_string.stdout_lines
    #when: PRINT_LOGINS == true
  when: EVENTMANAGER_EXISTS .resources|length != 0



# --------------------------------------------------------------------------------------------------------------------------------------
# OCP Demo User
# --------------------------------------------------------------------------------------------------------------------------------------
- name: LOGIN -  üöÄ OCP Demo User
  shell: |
    echo "**********************************************************************************************************************************"
    echo "OCP Connection Details"
    echo "**********************************************************************************************************************************"
    DEMO_TOKEN=$(oc -n default get secret $(oc get secret -n default |grep -m1 demo-admin-token|awk '{print$1}') -o jsonpath='{.data.token}'|base64 --decode)
    DEMO_URL=$(oc status|grep -m1 "In project"|awk '{print$6}')
    echo "        URL:     $DEMO_URL"
    echo "        Token:   $DEMO_TOKEN"
    echo ""
    echo ""
    echo ""
    echo "        Login:   oc login --token=$DEMO_TOKEN --server=$DEMO_URL"
    echo ""
    echo " "
    echo " "
    echo " "
    echo " "
  register: output_string
  ignore_errors: yes
- name: LOGIN -          üîê OCP Demo User
  debug: 
    var: output_string.stdout_lines
  #when: PRINT_LOGINS == true



# --------------------------------------------------------------------------------------------------------------------------------------
# Demo Apps
# --------------------------------------------------------------------------------------------------------------------------------------
- name: LOGIN -  üöÄ Demo Apps
  shell: |
    echo "**********************************************************************************************************************************"
    echo "Demo Apps - Details"
    echo "**********************************************************************************************************************************"
    appURL=$(oc get routes -n robot-shop web  -o jsonpath="{['spec']['host']}")|| true
    echo "    RobotShop:"
    echo "        APP URL:           http://$appURL/"
    echo ""
    appURL=$(oc get routes -n kubetoy kubetoy  -o jsonpath="{['spec']['host']}")|| true
    echo "    Kubetoy:"
    echo "        APP URL:           http://$appURL/"
    echo " "
    echo " "
    echo " "
    echo " "
  register: output_string
  ignore_errors: yes
- name: LOGIN -          üîê Demo Apps
  debug: 
    var: output_string.stdout_lines
  #when: PRINT_LOGINS == true



# --------------------------------------------------------------------------------------------------------------------------------------
# LDAP Connection
# --------------------------------------------------------------------------------------------------------------------------------------
- name: LOGIN -  üöÄ LDAP Connection
  shell: |
    echo "**********************************************************************************************************************************"
    echo "LDAP Connection Details"
    echo "**********************************************************************************************************************************"
    echo "    OPENLDAP:"
    echo "        URL:      http://$(oc get route -n default openldap-admin -o jsonpath={.spec.host})"
    echo "        User:     cn=admin,dc=ibm,dc=com"
    echo "        Password: P4ssw0rd!"
    echo " "
    echo " "
    echo " "
    echo " "
  register: output_string
  ignore_errors: yes
- name: LOGIN -          üîê LDAP Connection
  debug: 
    var: output_string.stdout_lines
  #when: PRINT_LOGINS == true






# --------------------------------------------------------------------------------------------------------------------------------------
# ADDONS - Turbonomic
# --------------------------------------------------------------------------------------------------------------------------------------
- name: CHECK -  üîé ADDONS - Turbonomic
  kubernetes.core.k8s:
    kind: Namespace
    name: turbonomic
  register: EVENTMANAGER_EXISTS 

- name: LOGIN -  üöÄ ADDONS - Turbonomic
  block:
  - name: LOGIN -  üöÄ ADDONS - Turbonomic
    shell: |
      echo "**********************************************************************************************************************************"
      echo "Turbonomic Dashboard Connection Details"
      echo "**********************************************************************************************************************************"
      echo "    Turbonomic Dashboard :"
      echo "        URL:      https://$(oc get route -n turbonomic api -o jsonpath={.spec.host})"
      echo "        User:     administrator"
      echo "        Password: As set at init step"
      echo " "
      echo " "
      echo " "
      echo " "
    register: ready
    ignore_errors: yes
  - name: LOGIN -          üîê ADDONS - Turbonomic
    debug: 
      var: ready.stdout_lines
    #when: PRINT_LOGINS == true
  when: EVENTMANAGER_EXISTS .resources|length != 0



# --------------------------------------------------------------------------------------------------------------------------------------
# ADDONS - Humio
# --------------------------------------------------------------------------------------------------------------------------------------
- name: CHECK -  üîé ADDONS - Istio
  k8s_info:
    kind: Namespace
    name: istio-system
  register: EVENTMANAGER_EXISTS 

- name: LOGIN -  üöÄ ADDONS - Istio
  block:
  - name: LOGIN -  üöÄ ADDONS - Istio
    shell: |
      echo "**********************************************************************************************************************************"
      echo "Istio Connection Details"
      echo "**********************************************************************************************************************************"
      echo ""
      echo "                üåè RobotShop:     http://$(oc get route -n istio-system istio-ingressgateway -o jsonpath={.spec.host})"
      echo "                üåè Kiali:         https://$(oc get route -n istio-system kiali -o jsonpath={.spec.host})"
      echo "                üåè Jaeger:        https://$(oc get route -n istio-system jaeger -o jsonpath={.spec.host})"
      echo "                üåè Grafana:       https://$(oc get route -n istio-system grafana -o jsonpath={.spec.host})"
      echo "    "
      echo "    "
      echo "          In the begining all traffic is routed to ratings-test"
      echo "            You can modify the routing by executing:"
      echo "              All Traffic to test:    oc apply -n robot-shop -f ./ansible/templates/demo_apps/robotshop/istio/ratings-100-0.yaml"
      echo "              Traffic split 50-50:    oc apply -n robot-shop -f ./ansible/templates/demo_apps/robotshop/istio/ratings-50-50.yaml"
      echo "              All Traffic to prod:    oc apply -n robot-shop -f ./ansible/templates/demo_apps/robotshop/istio/ratings-0-100.yaml"
      echo "    "
      echo "    "
      echo "    "
    register: output_string
    ignore_errors: yes
  - name: LOGIN -          üîê ADDONS - Istio
    debug: 
      var: output_string.stdout_lines
    #when: PRINT_LOGINS == true
  when: EVENTMANAGER_EXISTS .resources|length != 0


# --------------------------------------------------------------------------------------------------------------------------------------
# ADDONS - AWX
# --------------------------------------------------------------------------------------------------------------------------------------
- name: CHECK -  üîé ADDONS - AWX
  kubernetes.core.k8s:
    kind: Namespace
    name: awx
  register: EVENTMANAGER_EXISTS 

- name: LOGIN -  üöÄ ADDONS - AWX
  block:
  - name: LOGIN -  üöÄ ADDONS - AWX
    shell: |
      echo "**********************************************************************************************************************************"
      echo "AWX Connection Details"
      echo "**********************************************************************************************************************************"
      echo "    AWX:"
      echo "                üåè URL:      https://$(oc get route -n awx awx -o jsonpath={.spec.host})"
      echo "                üßë User:     admin"
      echo "                üîê Password: $(oc -n awx get secret awx-admin-password -o jsonpath='{.data.password}' | base64 --decode && echo)"
      echo " "
      echo " "
    register: output_string
    ignore_errors: yes
  - name: LOGIN -          üîê ADDONS - AWX
    debug: 
      var: output_string.stdout_lines
    #when: PRINT_LOGINS == true
  when: EVENTMANAGER_EXISTS .resources|length != 0

# --------------------------------------------------------------------------------------------------------------------------------------
# ADDONS - ManageIQ
# --------------------------------------------------------------------------------------------------------------------------------------
- name: CHECK -  üîé ADDONS - ManageIQ
  kubernetes.core.k8s:
    kind: Namespace
    name: manageiq
  register: EVENTMANAGER_EXISTS 

- name: LOGIN -  üöÄ ADDONS - HuManageIQmio
  block:
  - name: LOGIN -  üöÄ ADDONS - ManageIQ
    shell: |
      echo "**********************************************************************************************************************************"
      echo "ManageIQ Connection Details"
      echo "**********************************************************************************************************************************"
      echo "    ManageIQ:"
      echo ""
      echo "                üåè URL:      https://$(oc get route -n manageiq $(oc get route -n manageiq|grep httpd|awk '{print$1}') -o jsonpath={.spec.host})"
      echo "                üßë User:     admin"
      echo "                üîê Password: smartvm"
      echo " "
      echo " "
    register: output_string
    ignore_errors: yes
  - name: LOGIN -          üîê ADDONS - ManageIQ
    debug: 
      var: output_string.stdout_lines
    #when: PRINT_LOGINS == true
  when: EVENTMANAGER_EXISTS .resources|length != 0
  # --------------------------------------------------------------------------------------------------------------------------------------
# ADDONS - Humio
# --------------------------------------------------------------------------------------------------------------------------------------
- name: CHECK -  üîé ADDONS - Humio
  kubernetes.core.k8s:
    kind: Namespace
    name: humio-logging
  register: EVENTMANAGER_EXISTS 

- name: LOGIN -  üöÄ ADDONS - Humio
  block:
  - name: LOGIN -  üöÄ ADDONS - Humio
    shell: |
      echo "**********************************************************************************************************************************"
      echo "HUMIO Connection Details"
      echo "**********************************************************************************************************************************"
      echo "    HUMIO:"
      echo "        URL:      http://$(oc get route -n humio-logging humio -o jsonpath={.spec.host})"
      echo "        User:     developer"
      echo "        Password: $(oc get secret developer-user-password -n humio-logging -o  jsonpath="{['data']['password']}" | base64 --decode)"
      echo ""
      echo ""
      echo ""
      echo "        INTEGRATION URL:      http://$(oc get route -n humio-logging humio -o jsonpath={.spec.host})/api/v1/repositories/aiops/query"
      echo " "
      echo " "
      echo " "
      echo " "
    register: output_string
    ignore_errors: yes
  - name: LOGIN -          üîê ADDONS - Humio
    debug: 
      var: output_string.stdout_lines
    #when: PRINT_LOGINS == true
  when: EVENTMANAGER_EXISTS .resources|length != 0

# --------------------------------------------------------------------------------------------------------------------------------------
# ADDONS - Rook/Ceph
# --------------------------------------------------------------------------------------------------------------------------------------
- name: CHECK -  üîé ADDONS - Rook/Ceph
  kubernetes.core.k8s:
    kind: Namespace
    name: rook-ceph
  register: EVENTMANAGER_EXISTS 

- name: LOGIN -  üöÄ ADDONS - Rook/Ceph
  block:
  - name: LOGIN -  üöÄ ADDONS - Rook/Ceph
    shell: |
      echo "**********************************************************************************************************************************"
      echo "Rook/Ceph Dashboard Connection Details"
      echo "**********************************************************************************************************************************"
      echo "    Rook/Ceph Dashboard :"
      echo "        URL:      https://dash-rook-ceph.{{ CLUSTER_NAME.stdout }}/"
      echo "        User:     admin"
      echo "        Password: $(oc -n rook-ceph get secret rook-ceph-dashboard-password -o jsonpath="{['data']['password']}" | base64 --decode)"
    register: output_string
    ignore_errors: yes
  - name: LOGIN -          üîê ADDONS - Rook/Ceph
    debug: 
      var: output_string.stdout_lines
    #when: PRINT_LOGINS == true
  when: EVENTMANAGER_EXISTS .resources|length != 0




# --------------------------------------------------------------------------------------------------------------------------------------
# ADDONS - ELK
# --------------------------------------------------------------------------------------------------------------------------------------
- name: CHECK -  üîé ADDONS - ELK
  kubernetes.core.k8s:
    kind: Namespace
    name: openshift-logging
  register: EVENTMANAGER_EXISTS 

- name: LOGIN -  üöÄ ADDONS - ELK
  block:
  - name: LOGIN -  üöÄ ADDONS - ELK
    shell: |
      token=$(oc sa get-token cluster-logging-operator -n openshift-logging)
      routeES=`oc get route elasticsearch -o jsonpath={.spec.host} -n openshift-logging`
      routeKIBANA=`oc get route kibana -o jsonpath={.spec.host} -n openshift-logging`
      echo "      "
      echo "            üì• ELK:"
      echo "      "
      echo "               üåè ELK service URL             : https://$routeES/app*"
      echo "               üîê Authentication type         : Token"
      echo "               üîê Token                       : $token"
      echo "      "
      echo "               üåè Kibana URL                  : https://$routeKIBANA"
      echo "               üö™ Kibana port                 : 443"
      echo "               üó∫Ô∏è  Mapping                     : "
      echo "{ "
      echo "  \"codec\": \"elk\","
      echo "  \"message_field\": \"message\","
      echo "  \"log_entity_types\": \"kubernetes.container_image_id, kubernetes.host, kubernetes.pod_name, kubernetes.namespace_name\","
      echo "  \"instance_id_field\": \"kubernetes.container_name\","
      echo "  \"rolling_time\": 10,"
      echo "  \"timestamp_field\": \"@timestamp\""
      echo "}"
      echo "  "
      echo ""
      echo ""
    register: output_string
    ignore_errors: yes
  - name: LOGIN -          üîê ADDONS - ELK
    debug: 
      var: output_string.stdout_lines
    #when: PRINT_LOGINS == true
  when: EVENTMANAGER_EXISTS .resources|length != 0






# --------------------------------------------------------------------------------------------------------------------------------------
# USER
# --------------------------------------------------------------------------------------------------------------------------------------
- name: LOGIN -  üöÄ Flink Task Manager
  shell: |
    echo "**********************************************************************************************************************************"
    echo "Flink Task Manager"
    echo "**********************************************************************************************************************************"
    appURL=$(oc get routes -n {{ WAIOPS_NAMESPACE }} job-manager  -o jsonpath="{['spec']['host']}")
    echo "    Flink Task Manager:"
    echo "        APP URL:           https://$appURL/"
    echo ""
    echo "        In Chrome: if you get blocked just type "thisisunsafe" and it will continue (you don't get any visual feedback when typing!)"
    echo " "
    echo " "
    echo " "
    echo " "
  register: output_string
  ignore_errors: yes
- name: LOGIN -          üîê Flink Task Manager
  debug: 
    var: output_string.stdout_lines
  #when: PRINT_LOGINS == true


# --------------------------------------------------------------------------------------------------------------------------------------
# USER
# --------------------------------------------------------------------------------------------------------------------------------------
- name: LOGIN -  üöÄ Vault
  shell: |
    echo "**********************************************************************************************************************************"
    echo "Vault"
    echo "**********************************************************************************************************************************"
    echo "                üåè URL:      https://$(oc get route -n {{ WAIOPS_NAMESPACE }} ibm-vault-deploy-vault-route -o jsonpath={.spec.host})"
    echo "                üîê Token:    $(oc get secret -n {{ WAIOPS_NAMESPACE }} ibm-vault-deploy-vault-credential -o jsonpath='{.data.token}' | base64 --decode && echo)"
  register: output_string
  ignore_errors: yes
- name: LOGIN -          üîê Vault
  debug: 
    var: output_string.stdout_lines
  #when: PRINT_LOGINS == true



# --------------------------------------------------------------------------------------------------------------------------------------
# Service Now
# --------------------------------------------------------------------------------------------------------------------------------------
- name: LOGIN -  üöÄ Service Now Connection
  shell: |
    echo "**********************************************************************************************************************************"
    echo "Service Now Connection Details"
    echo "**********************************************************************************************************************************"
    echo "            üì• Login SNOW Dev Portal (if you have to wake the dev instance):"
    echo "    " 
    echo "                üåè URL:                   https://developer.servicenow.com/dev.do"
    echo "                üßë User:                  demo@mydemo.center"
    echo "                üîê Password:              P4ssw0rd!IBM"
    echo ""
    echo ""
    echo "            üì•  Login SNOW Instance::"
    echo ""
    echo "                üåè URL:                   https://dev56805.service-now.com"
    echo "                üßë User ID:               abraham.lincoln             (if you followed the demo install instructions)"
    echo "                üîê Password:              P4ssw0rd!                   (if you followed the demo install instructions)"
    echo "                üîê Encrypted Password:    g4W3L7/eFsUjV0eMncBkbg==    (if you followed the demo install instructions)"
    echo ""
    echo ""
    echo "            üì• INTEGRATION SNOW-->CP4WAIOPS:"
    echo "    " 
    echo "                üåè URL:                   https://$(oc get route -n {{ WAIOPS_NAMESPACE }} cpd -o jsonpath={.spec.host})    (URL for IBM Watson AIOps connection)"
    echo "                üìõ Instance Name:         aimanager"
    echo "                üßë User:                  admin"
    echo "                üîê Password:              $(oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 --decode)"
    echo " "
    echo " "
    echo " "
    echo " "
  register: output_string
  ignore_errors: yes
- name: LOGIN -          üîê Service Now Connection
  debug: 
    var: output_string.stdout_lines
  #when: PRINT_LOGINS == true
