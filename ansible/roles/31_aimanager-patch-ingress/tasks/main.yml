

# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Patching some stuff
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************
    

- name: TIMESTAMP -              游릭 START - PATCH INGRESS
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"


- name: INGRESS -                游닌 WRITE TO LOGFILE
  shell: |
    export MESSAGE="Create valid Ingress Certificates"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../installAIManager.log
    echo $currentDate" - "$USER" - "$MESSAGE  >> ../installAIManager.log
  ignore_errors: yes
   
   
# --------------------------------------------------------------------------------------------------------------------------------------
# Adapt Slack Welcome Message
# --------------------------------------------------------------------------------------------------------------------------------------
- name: SLACK -                  游돉 Wait for Slack Pod Ready
  shell: oc wait --namespace="{{ WAIOPS_NAMESPACE }}" --for=condition=Ready pods $(oc get po -n "{{ WAIOPS_NAMESPACE }}"|grep "aimanager-aio-chatops-slack-integrator"|awk '{print$1}') --timeout=600s
  ignore_errors: yes  
  register: slack_ready


- name: NETWORK -                游뽗 Patch NetworkPolicy
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-all-egress-and-ingress
      annotations:
        argocd.argoproj.io/sync-wave: "3"
      namespace: {{ WAIOPS_NAMESPACE }}
    spec:
      egress:
      - {}
      ingress:
      - {}
      podSelector: {}
      policyTypes:
      - Egress
      - Ingress
    EOF

  register: network_patch
  ignore_errors: yes


- name: CERTIFICATES -           游뽗 Patch AutomationUIConfig Certificates
  shell: |
    oc project {{ WAIOPS_NAMESPACE }}
    NAMESPACE={{ WAIOPS_NAMESPACE }}
    AUTO_UI_INSTANCE=$(oc get AutomationUIConfig -n $NAMESPACE --no-headers -o custom-columns=":metadata.name")
    IAF_STORAGE=$(oc get AutomationUIConfig -n $NAMESPACE -o jsonpath='{ .items[*].spec.zenService.storageClass }')
    ZEN_STORAGE=$(oc get AutomationUIConfig -n $NAMESPACE -o jsonpath='{ .items[*].spec.zenService.zenCoreMetaDbStorageClass }')
    oc get -n $NAMESPACE AutomationUIConfig $AUTO_UI_INSTANCE --ignore-not-found -o yaml > /tmp/AutomationUIConfig-backup-$(date +%Y%m%d-%H%M).yaml
    
    if [[ ! $IAF_STORAGE == "" ]];
    then
    oc delete -n $NAMESPACE AutomationUIConfig $AUTO_UI_INSTANCE

    cat <<EOF | oc apply -f -
    apiVersion: core.automation.ibm.com/v1beta1
    kind: AutomationUIConfig
    metadata:
      name: $AUTO_UI_INSTANCE
      namespace: $NAMESPACE
    spec:
      description: AutomationUIConfig for cp4waiops
      license:
        accept: true
      version: v1.3
      zen: true
      zenService:
        iamIntegration: true
        storageClass: $IAF_STORAGE
        zenCoreMetaDbStorageClass: $ZEN_STORAGE
      tls:
        caSecret:
          key: ca.crt
          secretName: external-tls-secret
        certificateSecret:
          secretName: external-tls-secret
    EOF
    else
      echo "Couldn't get IAF_STORAGE"
    fi
  register: certificate_patch
  ignore_errors: yes


- name: CERTIFICATES -           游릭 Patch AutomationUIConfig Certificates
  debug: 
    var: certificate_patch


- name: CERTIFICATES -           游뽗 Patch Ingress Certificates (you can ignore errors in this step)
  shell: |
    ingress_pod=$(oc get secrets -n openshift-ingress | grep tls | grep -v router-metrics-certs-default | awk '{print $1}')
    oc get secret -n openshift-ingress ${ingress_pod} -o jsonpath='{.data.tls\.crt}'  | base64 -d > /tmp/cert.crt
    oc get secret -n openshift-ingress ${ingress_pod} -o jsonpath='{.data.tls\.key}' | base64 -d > /tmp/cert.key
    oc get secret -n {{ WAIOPS_NAMESPACE }} iaf-system-automationui-aui-zen-ca -o jsonpath='{.data.ca\.crt}' | base64 -d > /tmp/ca.crt

    oc get secret -n {{ WAIOPS_NAMESPACE }} external-tls-secret --ignore-not-found -o yaml > /tmp/external-tls-secret-backup-$(date +%Y%m%d-%H%M).yaml
    oc delete secret -n {{ WAIOPS_NAMESPACE }} --ignore-not-found external-tls-secret
    oc create secret generic -n {{ WAIOPS_NAMESPACE }} external-tls-secret --from-file=ca.crt=/tmp/ca.crt --from-file=cert.crt=/tmp/cert.crt --from-file=cert.key=/tmp/cert.key --dry-run=client -o yaml | oc apply -f -
    REPLICAS=2
    oc scale Deployment/ibm-nginx --replicas=0
    sleep 3
    oc scale Deployment/ibm-nginx --replicas=${REPLICAS}
  register: certificate_patch
  ignore_errors: yes

- name: CERTIFICATES -           游릭 Patch Ingress Certificates
  debug: 
    var: certificate_patch







# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for nginx Pods
# --------------------------------------------------------------------------------------------------------------------------------------
- name: CERTIFICATES -           游돉 Wait for nginx coming back up
  shell: oc get po -n {{ WAIOPS_NAMESPACE }} | grep nginx|grep "1/1"|grep -c ""
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout == "2"
  retries: 50
  delay: 15



# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for AutomationUIConfig ready
# --------------------------------------------------------------------------------------------------------------------------------------
# - name: CERTIFICATES -         游돉 Wait for AutomationUIConfig being ready (this might take several minutes)
#   shell: oc get AutomationUIConfig -n {{ WAIOPS_NAMESPACE }} iaf-system  | grep True|grep -c ""
#   register: kubectl_get_pods
#   until: kubectl_get_pods.stdout == "1"
#   retries: 500
#   delay: 15


- name: SLACK -                  游뽗 Patch Slack Welcome Message
  shell: |
    oc set env -n {{ WAIOPS_NAMESPACE }} deployment/$(oc get deploy -n {{ WAIOPS_NAMESPACE }} -l app.kubernetes.io/component=chatops-slack-integrator -o jsonpath='{.items[*].metadata.name }') SLACK_WELCOME_COMMAND_NAME=/welcome
    oc delete pod $(oc get po -n {{ WAIOPS_NAMESPACE }}|grep slack|awk '{print$1}') -n {{ WAIOPS_NAMESPACE }} --grace-period 0 --force
  ignore_errors: yes


