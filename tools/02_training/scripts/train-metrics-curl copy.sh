#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT MODIFY BELOW
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


echo "***************************************************************************************************************************************"
echo "***************************************************************************************************************************************"
echo ""
echo " üöÄ  CP4WAIOPS Incident Metrics for $APP_NAME"
echo ""
echo "***************************************************************************************************************************************"


export LATENCY_SEC_MAX=2

#--------------------------------------------------------------------------------------------------------------------------------------------
#  Check Defaults
#--------------------------------------------------------------------------------------------------------------------------------------------


if [[ $APP_NAME == "" ]] ;
then
      echo "‚ö†Ô∏è AppName not defined. Launching this script directly?"
      echo "‚ùå Aborting..."
      exit 1
fi



#--------------------------------------------------------------------------------------------------------------------------------------------
# Get Credentials
#--------------------------------------------------------------------------------------------------------------------------------------------

echo "***************************************************************************************************************************************"
echo "  üîê  Getting credentials"
echo "***************************************************************************************************************************************"
oc project $WAIOPS_NAMESPACE 


export ROUTE=$(oc get route | grep ibm-nginx-svc | awk '{print $2}')
PASS=$(oc get secret admin-user-details -o jsonpath='{.data.initial_admin_password}' | base64 -d)
export TOKEN=$(curl -k -s -X POST https://$ROUTE/icp4d-api/v1/authorize -H 'Content-Type: application/json' -d "{\"username\": \"admin\",\"password\": \"$PASS\"}" | jq .token | sed 's/\"//g')


export DATE_FORMAT="+%s0"
export WORKING_DIR_METRICS="./tools/02_training/test/$APP_NAME/metrics"

echo ""
echo ""








echo "***************************************************************************************************************************************"
echo "***************************************************************************************************************************************"
echo "  "
echo "  üîé  Parameter for Training"
echo "  "
echo "           üåè Metrics URL                 : $ROUTE"
echo "           üîê Metrics Token               : $TOKEN"
echo "  "
echo "           üìÖ Date Format                 : $(date $DATE_FORMAT) ($DATE_FORMAT)"
echo "  "
echo "  "
echo "           üìÇ Directory for Events        : $WORKING_DIR_METRICS"
echo "  "
echo "***************************************************************************************************************************************"
echo "***************************************************************************************************************************************"
echo ""
echo ""
echo "***************************************************************************************************************************************"
echo "***************************************************************************************************************************************"
echo "  üóÑÔ∏è  Files to be loaded for Log Anomalies"
echo "***************************************************************************************************************************************"
ls -1 $WORKING_DIR_METRICS | grep "json"
echo "  "
echo "  "
echo "***************************************************************************************************************************************"
echo "***************************************************************************************************************************************"

echo ""
echo ""



# echo "***************************************************************************************************************************************"
# echo "***************************************************************************************************************************************"
#   read -p " ‚ùó‚ùì Start Training? [y,N] " DO_COMM
#   if [[ $DO_COMM == "y" ||  $DO_COMM == "Y" ]]; then
#       echo "   ‚úÖ Ok, continuing..."
#       echo ""
#       echo ""
#       echo ""
#       echo ""

#   else
#     echo "‚ùå Aborted"
#     exit 1
#   fi
echo "***************************************************************************************************************************************"
echo "***************************************************************************************************************************************"
echo ""
echo ""
echo ""
echo ""

#--------------------------------------------------------------------------------------------------------------------------------------------
#  Launch Log Injection as a parallel thread
#--------------------------------------------------------------------------------------------------------------------------------------------
echo "***************************************************************************************************************************************"
echo "***************************************************************************************************************************************"
echo " üöÄ  Launching Metrics Training" 
echo "***************************************************************************************************************************************"
echo "***************************************************************************************************************************************"
echo ""
echo ""
echo ""
while true
do

      export my_timestamp=$(date $DATE_FORMAT)
      echo "Injecting at "$my_timestamp"000"

      echo "" > /tmp/timestampedErrorFiles-events.json
      for actFile in $(ls -1 $WORKING_DIR_METRICS | grep "json"); 
      do 
      #--------------------------------------------------------------------------------------------------------------------------------------------
      #  Prepare the Log Data
      #--------------------------------------------------------------------------------------------------------------------------------------------

            # echo "***************************************************************************************************************************************"
            # echo "  üõ†Ô∏è  Preparing Data for file $actFile"
            # echo "***************************************************************************************************************************************"
            ADD_SECONDS=100

            while IFS= read -r line
            do
                  ((ADD_SECONDS++))
                  ((ADD_SECONDS++))

                  export MSQL_LAT_MS_MAX=$(($RANDOM%1000))
                  export MSQL_LAT_SEC_MAX=$(($RANDOM%$LATENCY_SEC_MAX+1))
                  export MSQL_LAT_MS_MEAN=$(($RANDOM%1000))
                  export MSQL_LAT_SEC_MEAN=1

                  export MSQL_LAT_MEAN="$MSQL_LAT_SEC_MEAN.$MSQL_LAT_MS_MEAN"
                  export MSQL_LAT_MAX="$MSQL_LAT_SEC_MAX.$MSQL_LAT_MS_MAX"

                  export MSQL_TPS_MAX=$(($RANDOM%100+100))
                  export MSQL_TPS_MEAN=$(($RANDOM%50+50))

                  export MSQL_MEM_MAX=$(($RANDOM%10000+50000))
                  export MSQL_MEM_MEAN=$(($RANDOM%1000+50000))


                  export RAT_LAT_MS_MAX=$(($RANDOM%1000))
                  export RAT_LAT_SEC_MAX=$(($RANDOM%$LATENCY_SEC_MAX+1))
                  export RAT_LAT_MS_MEAN=$(($RANDOM%1000))
                  export RAT_LAT_SEC_MEAN=1

                  export RAT_LAT_MEAN="$RAT_LAT_SEC_MEAN.$RAT_LAT_MS_MEAN"
                  export RAT_LAT_MAX="$RAT_LAT_SEC_MAX.$RAT_LAT_MS_MAX"

                  export RAT_TPS_MAX=$(($RANDOM%100+100))
                  export RAT_TPS_MEAN=$(($RANDOM%50+50))

                  export RAT_MEM_MAX=$(($RANDOM%10000+50000))
                  export RAT_MEM_MEAN=$(($RANDOM%1000+50000))


                  # Get timestamp in ELK format
                  export my_timestamp=$(date $DATE_FORMAT)"$ADD_SECONDS"
                  # echo $my_timestamp
                  #echo "$my_timestamp:$METRIC_MEAN:$METRIC_MAX"
                  # echo $METRIC_MEAN
                  # echo $METRIC_MAX
                  # Replace in line
                  line=${line//MY_TIMESTAMP/$my_timestamp}
                  line=${line//MSQL_LATENCY_MAX/$MSQL_LAT_MAX}
                  line=${line//MSQL_LATENCY_MEAN/$MSQL_LAT_MEAN}
                  line=${line//MSQL_TPS_MAX/$MSQL_TPS_MAX}
                  line=${line//MSQL_TPS_MEAN/$MSQL_TPS_MEAN}
                  line=${line//MSQL_MEM_MAX/$MSQL_MEM_MAX}
                  line=${line//MSQL_MEM_MEAN/$MSQL_MEM_MEAN}

                  line=${line//RAT_LATENCY_MAX/$RAT_LAT_MAX}
                  line=${line//RAT_LATENCY_MEAN/$RAT_LAT_MEAN}
                  line=${line//RAT_TPS_MAX/$RAT_TPS_MAX}
                  line=${line//RAT_TPS_MEAN/$RAT_TPS_MEAN}
                  line=${line//RAT_MEM_MAX/$RAT_MEM_MAX}
                  line=${line//RAT_MEM_MEAN/$RAT_MEM_MEAN}





                  # Write line to temp file
                  echo $line >> /tmp/timestampedErrorFiles-events.json
                  #sleep 2
                  #echo "         ." #$my_timestamp"
            done < "$WORKING_DIR_METRICS/$actFile"


            #cat /tmp/timestampedErrorFiles-events.json
            export result=$(curl -k -s -X POST "https://${ROUTE}/aiops/api/app/metric-api/v1/metrics" --header 'Content-Type: application/json' --header "Authorization: Bearer ${TOKEN}" --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' --data @/tmp/timestampedErrorFiles-events.json)
            #echo "::::"$result
            #exit 1
      done
done 
#--------------------------------------------------------------------------------------------------------------------------------------------
#  Clean up
#--------------------------------------------------------------------------------------------------------------------------------------------



echo "***************************************************************************************************************************************"
echo ""
echo " ‚úÖ  Event Injection Done..... "
echo "     Hit ENTER if the command prompt does not appear"
echo ""
echo "***************************************************************************************************************************************"
echo "***************************************************************************************************************************************"
echo "  üíØ  Getting Metrics"
echo "***************************************************************************************************************************************"
curl -k "https://${ROUTE}/aiops/api/app/metric-api/v1/metrics?resource=mysql&group=Latency&metric=latency.max" --header "Authorization: Bearer ${TOKEN}" --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' --insecure

echo "***************************************************************************************************************************************"
echo "  ü´Ä  Getting Forecast"
echo "***************************************************************************************************************************************"
curl -k "https://${ROUTE}/aiops/api/app/metric-api/v1/metrics?resource=mysql&group=Latency&metric=latency.max" --header "Authorization: Bearer ${TOKEN}" --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' --insecure

echo "oc exec -it aiops-topology-cassandra-0 -- bash"

echo "cqlsh --ssl -u ${CASSANDRA_USER} -p ${CASSANDRA_PASS}"

echo "describe tables;"

echo "SELECT * FROM tararam.dt_metric_value;"
echo "SELECT * FROM tararam.md_metric_resource;"

echo ""
echo ""
echo ""
echo ""
echo "***************************************************************************************************************************************"
echo "***************************************************************************************************************************************"
echo ""
echo " üöÄ  CP4WAIOPS Training"
echo " ‚úÖ  Done..... "
echo ""
echo "***************************************************************************************************************************************"
echo "***************************************************************************************************************************************"







echo ""
echo ""
echo ""
echo ""
echo "***************************************************************************************************************************************"
echo "***************************************************************************************************************************************"
echo ""
echo " üöÄ  CP4WAIOPS Train Events for $APP_NAME"
echo " ‚úÖ  Done..... "
echo ""
echo "***************************************************************************************************************************************"
echo "***************************************************************************************************************************************"


